//-**
   *
   *  gum/mint.jade
   *
   *  PHP Mixin Library for Jade.
   *
   */
include gum

//-**
   *
   *  Keeps track of processing mixins.
   *
   *  @since 0.0.1
   */
- Mixin = {}
- Mixin.php    = false
- Mixin.if     = false
- Mixin.switch = false
- Mixin.case   = false
//-**
   *
   *  Echoes opening/closing <?php ?> tags alternatively.
   *
   *  @since 0.0.1
   */
mixin php
  - Mixin.php = !Mixin.php
  if Mixin.php
    !='<?php '
  else
    !='?>'
//-**
   *
   *  Echoes a block and/or arguments inside <?php ?> tags.
   *  If none are passed, declares a list of variables with
   *  the attributes object. Variables declared here are also
   *  instantiated as $ nodes and thus can be used via $.var
   *  inside +if or +while mixins.
   *
   *    +- block
   *
   *    +-(before, after)
   *      [block]
   *
   *    +-(a=Number b=String c=Array d=Object)
   *
   *    +-(func=myFunc a b c)
   *      block
   *
   *  @before       Text to prepend to the code inside <?php?>.
   *  @after        Text to append to the code inside <?php?>.
   *  @block        Code to render inside <?php?>.
   *  @attributes   List of variables to declare / initialize.
   *
   *  @since 0.0.1
   */
mixin -(before, after)


  if $.util.has(attributes)
    if $.util.has(attributes) === 'function'


    else
      each value, name in attributes
        - var obj = { output: value, length: 0 }

        if value instanceof Array
          - obj.output = '[' + value + ']'
          - obj.length = value.length

        else if value instanceof Object
          - obj = $.util.jsToDictionary(value)

        else if typeof value === 'string'
          if value.substr(0,1) === '$'
            - obj.output = $.util.escapeQuotes(value)
          else
            - obj.output = $.util.quote(value)

        - $(name, '$'+name).length = obj.length
        +-($[name] + '=' + obj.output)

  else
    - before = before || ''
    - after = after || ';'
    +php
    !=before
    if block
      block
    !=after
    +php








//-**
   *
   *  Echoes the block inside /* */ comment tags.
   *
   *  @since 0.0.1
   */
mixin func
  +-('function', '*/')
    block


//-**
   *
   *  Echoes the block inside /* */ comment tags.
   *
   *  @since 0.0.1
   */
mixin --
  +-('/*', '*/')
    block
//-**
   *
   *  Echoes a require_once("file[.php]") statement.
   *
   *  @since 0.0.1
   */
mixin require(file)
  +-('require_once(', ');')
    != $.util.quote(file + (file.substr(-4) !== '.php' ? '.php': ''))
//-**
   *
   *  Simple PHP echo statement.
   *
   *   +echo([args, ...])
   *   +echo block
   *   +echo
   *     block
   *
   *  @since 0.0.1
   */
mixin echo
  - var echo = "", args = arguments
  +-('echo')
    if block
      block
    else
      each value in args
        - echo += $.util.quoteString(value) + '.'
      !=echo.slice(0,-1)
//-**
   *
   *  Simple PHP die function.
   *
   *  @since 0.0.1
   */
mixin die
  +-('die(', ');')
    block
//-**
   *
   *  PHP if / elseif statement helper. @private
   *
   *  @since 0.0.1
   */
mixin _if(condition, elseif)
  - Mixin.if = true
  +-( (elseif ? 'elseif(' : 'if(') + condition + ')', ':')
    block
//-**
   *
   *  PHP if statement.
   *
   *  @since 0.0.1
   */
mixin if(condition)
  +_if (condition)
  block
//-**
   *
   *  PHP elseif statement.
   *
   *  @since 0.0.1
   */
mixin elseif(condition)
  +_if (condition, /*elseif*/true)
  block
//-**
   *
   *  Echoes an if (!condition) block.
   *
   *  @since 0.0.1
   */
mixin unless(condition)
  +if('!' + condition)
    block
  +endif
//-**
   *
   *  PHP else statement. When inside a switch echoes the default case.
   *
   *  @since 0.0.1
   */
mixin else
  if Mixin.switch && !Mixin.if
    +-('default', ':')
    +- break
  else
    +-('else', ':')
  block
//-**
   *
   *  PHP endif statement.
   *
   *  @since 0.0.1
   */
mixin endif
  +- endif
  - Mixin.if = false
//-**
   *
   *  @since 0.0.1
   */
mixin switch(condition)
  - Mixin.switch = true, Mixin.case = true
  +php
  !='switch(' + condition + '):'
  block
  +- endswitch
  - Mixin.switch = false
//-**
   *
   *  @since 0.0.1
   */
mixin case(condition)
  if Mixin.case
    !='case ' + $.util.quoteString(condition) + ':'
    +php
    - Mixin.case = false
  else
    +-('case ', ':')
      !=$.util.quoteString(condition)
  block
  +- break
//-**
   *
   *  PHP while loop.
   *
   *  @since 0.0.1
   */
mixin while(condition)
  +-('while(' + condition, '):')
  block
  +- endwhile
//-**
   *
   *  Echoes a simple PHP for loop.
   *
   *  +for(name=from to=N [by=N])
   *
   *  Creates a $ node with @name and generates a for loop that runs
   *  @to - @from times at @by intervals. If not set, @by increments
   *  by 1 if @from < @to, or -1 if viceversa.
   *
   *  +for(i=0 to=10)
   *    ...
   *  +for(j=10 to=0)
   *    ...
   *  +for(k=100 to=-100 by=-10)
   *    ...
   *
   *  @since 0.0.1
   */
mixin for
  - var prop = $.util.has(attributes);
  - var from = attributes[prop];
  - var to = attributes.to;
  - var by = attributes.by || (from < to ? 1 : -1);
  - var sym = by > 0 ? '<' : '>';
  - var and = by > 0 ? '+' : '';
  - prop = $(prop, '$' + prop).toString();
  +-('for(' + prop + '=' + from + ';' +
              prop + sym + to   + ';' +
              prop + '=' + prop + and + by + ')',':')
  block
  +- endfor
//-**
   *
   *  Echoes a PHP foreach loop.
   *
   *  +each(in=array item)
   *    ...
   *
   *  Creates a $ node with @item and generates a foreach loop that runs
   *  for each item in @array.
   *
   *  @since 0.0.1
   */
mixin each
  - var prop = $.util.has(attributes, 2)
  - prop = $(prop, '$'+prop).toString();
  +-('foreach(' + attributes.in + ' as ' + prop, "):")
  block
  +- endforeach
//-**
   *
   *  Repeats the block $times times.
   *
   *  @times to repeat the block.
   *
   *  @since 0.0.1
   */
mixin repeat(times)
  - var i = 0
  while i++ < times
    block
//-**
   *
   *  Echoes a yet block as described below.
   *
   *    data = callback()
   *    if (data) {
   *      block
   *    }
   *
   *  Generates a block that calls a function @callback, stores the
   *  result in @data and inserts the block if @data returns !null.
   *
   *  @since 0.0.1
   */
mixin yet(callback,data)
  - data = data || '$data';
  +- #{data} = #{callback}
  +if(data)
    block
    +- unset(#{data})
  +endif
//-**
   *
   *  Echoes a maybe block as described below.
   *
   *    if (block) {
   *      <markup id="" class="">
   *      echo block
   *      </markup>
   *    }
   *
   *  Generates an if statement that echoes the contents of the block
   *  if not null wrapped in markup optionally. We are passing markup
   *  as an argument and the condition as a block, so is not possible
   *  to use +if() that expects the condition to be its argument.
   *
   *  @since 0.0.1
   */
mixin maybe(markup)
  +-('if(', '):')
    block
  - markup = $.tag(markup)
  #{markup.name}(id=markup.id class=markup.class)
    +echo
      block
  +endif
//-**
   *
   *  Echoes the block inside conditional IE<version> comments.
   *
   *  @since 0.0.1
   */
mixin if_ie(version, condition)
  - condition = condition || ''
  !='<!--[if ' + condition + ' IE ' + version + ']>'
  block
  !='<![endif]-->'
//-**
   *
   *  Echoes the block inside conditional lt IE<version> comments.
   *
   *  @since 0.0.1
   */
mixin if_lt_ie(version)
  +if_ie(version, 'lt')
//-**
   *
   *  Echoes the block inside conditional gt IE<version> comments.
   *
   *  @since 0.0.1
   */
mixin if_gt_ie(version)
  +if_ie(version, 'gt')
//-**
   *
   *  Echoes IE<version> conditional comments for the HTML element.
   *
   *  @since 0.0.1
   */
mixin html_ie(version)
  !='<!--[if IE ' + version + ']><html'
  if attributes.php
    !=' <?php ' + attributes.php + '; ?>'
  //- Wraps the value in <?php ?> tags

  if attributes.lang
    !=' lang=' + attributes.lang
  //- Specifies the language of the element's content.

  if attributes.class
    !=' class="' + attributes.class + '"'
  //- Specifies one or more classnames for the element.

  if attributes.id
    !=' id="' + attributes.id + '"'
  //- Specifies a unique id for the element.

  if attributes.xmlns
    !=' xmlns="' + attributes.xmlns + '"'
  //- Specifies the XML namespace attribute.

  !='>'
  !='<![endif]-->'
//-**
   *
   *  Echoes the html5shiv hack.
   *
   *  @since 0.0.1
   */
mixin html5shiv(url)
  - url = url || 'http://html5shiv.googlecode.com/svn/trunk/html5.js'
  +if_lt_ie(9)
    !='<script src="' + url + '"></script>'
  !='<!--[if lt IE 9]><script src="' + url + '"></script><![endif]-->'
